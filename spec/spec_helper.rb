# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

module ScheduleHelper
  TEST_SCHEDULE = Pathname.new('tmp/schedule.rb')
  CHILD_STDOUT  = Pathname.new('tmp/stdout')
  CHILD_STDERR  = Pathname.new('tmp/stderr')

  def create_schedule(string)
    TEST_SCHEDULE.open('w') do |io|
      io.write string
    end
  end

  def remove_schedule
    TEST_SCHEDULE.delete_if_exist
  end

  def run_schedule
    raise 'already started' if @schedule_pid
    @schedule_pid = fork do
      if TEST_SCHEDULE.exist?
        # exec "bin/rufus-runner #{TEST_SCHEDULE} > #{CHILD_STDOUT} 2> #{CHILD_STDERR}"
        exec "bin/rufus-runner #{TEST_SCHEDULE}"
      else
        # exec "bin/rufus-runner #{CHILD_STDOUT} 2> #{CHILD_STDERR}"
        exec "bin/rufus-runner"
      end
    end
    sleep 1.0 # give the process time to start
              # this should wait for a file instead...
  end

  def signal_schedule(signal)
    raise 'not started' unless @schedule_pid
    Process.kill(signal, @schedule_pid)
  end

  def wait_schedule
    raise 'not started' unless @schedule_pid
    result = Process.waitpid2(@schedule_pid).last.to_i
    @schedule_pid = nil
    result
  end

  def end_schedule
    return unless @schedule_pid
    Process.kill('KILL', @schedule_pid)
    Process.wait(@schedule_pid)
    @schedule_pid = nil
  end
end


module FileExpectationsHelper
  def wait_for_file(pathname)
    1.upto(100) do
      return true if pathname.exist?
      Kernel.sleep(100e-3)
    end 
    return false
  end

  def expect_new_file(pathname)
    pathname = Pathname.new(pathname) if pathname.kind_of?(String)
    pathname.delete if pathname.exist?
    yield
    wait_for_file(pathname) and return
    raise 'file did not appear'
  end
end


RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  # config.order = 'random'

  config.include ScheduleHelper
  config.include FileExpectationsHelper

  config.after(:each) { end_schedule }
  config.after(:each) { remove_schedule }
end
